%Load Signal
[Signal,sampling1,bits1] = wavread('27Apr09_174921_026_p1.wav');
[Signal2,sampling2,bits2] = wavread('27Apr09_174921_026_p2.wav');

%Times
primerevento_inicial=13440000;
primerevento_final=15840000;
segundoevento_inicial=49920000;
segundoevento_final=51840000;

%¡ lenght, sample freq and print
[fileLength2,num_channels2]=size(Signal2);
[fileLength1,num_channels1]=size(Signal);
duration1=fileLength1/sampling1;
duration2=fileLength2/sampling2;
text1=sprintf(' Signal1. Sampling frequency: %d Hz.\n Number of samples: %d\n Time duration: %.1f seconds', sampling1, fileLength1, duration1)
text2=sprintf(' Signal2. Sampling frequency: %d Hz.\n Number of samples: %d\n Time duration: %.1f seconds',  sampling2, fileLength2, duration2)
DEBUG=1;
Fs=sampling1;

%Cut the SIGNAL
inicio=primerevento_inicial;
final=primerevento_final;


Signalcortada=Signal(inicio:final);
Signal2cortada=Signal2(inicio:final);
M =length(Signalcortada)
%%
output=interactive_TDE_real_data();


%% BACKGROUND NOISE
% Let us compute the PSD of the background noise in Signalcortada, for
% later use. It appears that the noise is pink, 
L=1;
L2=560000;
real_noise=Signalcortada(L:L2);
real_noise_std=std(real_noise)

clf;
pwelch(real_noise,[],[],[],Fs);
%% FILTER FROM 1Khz to 12Khz

%clear ax;
%cortada=0.33*length(Signal);
%time=(0:cortada-1)/Fs;
%ax(1)=subplot(3,1,1); plot(time,Signal)
%ylabel('Amplitude');
%title('Signal #1');
%hold on;
%ax(2)=subplot(3,1,2); plot(time,Signal2)
%ylabel('Amplitude');
%title('Signal #2');
%linkaxes(ax,'x');
%zoom
%set(gca,'xlim',[6.66 6.73]);
% Let us listen to the first two clicks at hydrophone #1. 
%soundsc(Signal(150*Fs:165*Fs),Fs);

 Fs=96e3; % 96 KHz
    
        % 1. hydrophone signal is not zero mean :0
        signal1 = Signalcortada - mean(Signalcortada);
        % signal1= input;

        % 2. Just looking for minke whales
        % Band-pass filter
        % Generated by MATLAB(R) 8.1 and the DSP System Toolbox 8.4.
        % Generated on: 22-Nov-2013 14:26:55
        % Chebyshev Type I Bandpass filter designed using FDESIGN.BANDPASS.
        % All frequency values are in Hz.
        Fs = 96000;  % Sampling Frequency
        N      = 50;     % Order
        Fpass1 = 1e3;   % First Passband Frequency
        Fpass2 = 3e3;  % Second Passband Frequency
        Apass  = 1;      % Passband Ripple (dB)
        % Construct an FDESIGN object and call its CHEBY1 method.
        h  = fdesign.bandpass('N,Fp1,Fp2,Ap', N, Fpass1, Fpass2, Apass, Fs);
        Hd = design(h, 'cheby1');
        signal2 = sosfilt(Hd.sosMatrix,signal1);
        % DEBUG: visualize the frequency response of the filter
       % fvtool(Hd);
        % signal2=signal1;
        Signalcortada=signal2;
        
        
        %LA SEGUNDA
       signal1 = Signal2cortada - mean(Signal2cortada);
        signal2 = sosfilt(Hd.sosMatrix,signal1);
        Signal2cortada=signal2;
        
        figure(1)  
plot(Signalcortada)
figure(2)  
plot(Signal2cortada)
        

%% Time Gain normalization

Signalprocesada=time_gain(Signalcortada,0.9,1);
Signal2procesada=time_gain(Signal2cortada,0.9,1);

%figure(1)
%plot(Signalprocesada)
%figure(2)
%plot(Signalcortada)
%figure(3) 
%specgram(Signalprocesada,1024,Fs)
%figure(4) 
%specgram(Signalcortada,1024,Fs)




%%
%PERCENTIL NOISE REMOVAL
Signalprocesada=percentile(Signalcortada,90,Fs,5);
Signal2procesada=percentile(Signal2cortada,90,Fs,5);

%figure(1)
%plot(Signalprocesada)
%figure(2)
%plot(Signalcortada)
%figure(3) 
%specgram(Signalprocesada,1024,Fs)
%figure(4) 
%specgram(Signalcortada,1024,Fs)

  
%%
%Spectralsubstraction
Signalprocesada=spectralsubstraction(Signalcortada,Fs,5,0.0001);
Signal2procesada=spectralsubstraction(Signal2cortada,Fs,5,0.0001);

%figure(1)
%plot(Signalprocesada)
%figure(2)
%plot(Signalcortada)
%figure(3) 
%specgram(Signalprocesada,1024,Fs)
%figure(4) 
%specgram(Signalcortada,1024,Fs)

%% Frequency band normalization
Signalresultant=freq_band(Signalcortada,Fs);
Signal2resultant=freq_band(Signal2cortada,Fs);

%PLOT ALL
figure(1) 
plot(Signalresultant)
figure(2)
plot(Signalcortada)





%% TK FILTER
Signalcortada=teager_kaiser(Signalcortada);
Signal2cortada=teager_kaiser(Signal2cortada);

%PLOT ALL
%ax(1)=subplot(3,1,1);
%plot(Signalcortada);
%ylabel('Amplitude');
%ax(2)=subplot(3,1,2);
%plot(Signalcortadatk);
%ylabel('Amplitude');
%linkaxes(ax,'x');

%figure
%ax(1)=subplot(4,1,1);
%plot(Signal2cortada);
%ylabel('Amplitude');
%ax(2)=subplot(4,1,2);
%plot(Signal2cortadatk);
%ylabel('Amplitude');
%linkaxes(ax,'x');
%%
%%
[Signalprueba,Fs,bits1] = wavread('seno1.wav');
[Signal2prueba,Fs,bits2] = wavread('seno2.wav');
figure
delaymax=96000*0.001
[TDE,peak]=pruebadelay2(Signalprueba,Signal2prueba,delaymax,0.001);
[val,ind]=max(peak);
Best_estimate_TDOA=TDE(ind)
subplot(2,1,1);
plot(TDE);
xlabel('Time (samples)'); ylabel('TDOA (samples)');
subplot(2,1,2);
plot(peak);
xlabel('Time (samples)'); ylabel('peak');



%% TDE PROCESS THE TIME DELAY STIMATION WITH CC GCC CTE,PHAT,SCOT
gcc_mode = 'scot';
gcc_mode1 = 'cc';
gcc_mode3 = 'phat';
Signal_a_correlar=Signalprocesada;
Signal_a_correlar2=Signal2procesada;

%Xcorr
xcorr_ballena = xcorr(Signal_a_correlar,Signal_a_correlar2);
[val,ind]=max(xcorr_ballena );
delay_ball= ind-M
delay_ball_s=delay_ball/Fs;
%Gcorr normal
gcorr_ballena = gcc_marques_nuevo(Signal_a_correlar,Signal_a_correlar2,gcc_mode1);
[val,ind]=max(gcorr_ballena );
delay_ballgccn= ind-M
delay_ballgccn_cte=delay_ballgccn/Fs;
%Gcorr scot
gscorr_ballena = gcc_marques_nuevo(Signal_a_correlar,Signal_a_correlar2,gcc_mode);
[val,ind]=max(gscorr_ballena );
delay_ballgccs= ind-M
delay_ballgcc_scot=delay_ballgccs/Fs;
%Gcorr phat
gpcorr_ballena = gcc_marques_nuevo(Signal_a_correlar,Signal_a_correlar2,gcc_mode3);
[val,ind]=max(gpcorr_ballena );
delay_ballgccp= ind-M
delay_ballgcc_phat=delay_ballgccp/Fs;

%plot ALL 
if DEBUG
    figure(1)
    plot(xcorr_ballena); title('xcorr between whales');
    
    figure(4)
    plot(gcorr_ballena); title('gcorr between whales');
 
   figure(2)
    plot(gpcorr_ballena); title('gcorr-phat between whales');
    
  figure(3)
    plot(gscorr_ballena); title('gcorr Scot between whales');
end
%%
delay_1=delay_ball_s;
%%
delay_2=delay_ball_s
%%
delay_3=delay_ball_s;
%%
delay_4=delay_ball_s
%%
delay_5=delay_ball_s;
%%
delay_6=delay_ball_s
%%
delay_7=delay_ball_s;
%%
delay_8=delay_ball_s
%%
delay_9=delay_ball_s;
%%
delay_10=delay_ball_s

%%
%%
delay_11=delay_1;
%%
delay_12=delay_3
%%
delay_13=delay_4;
%%
delay_14=delay_9;
%%
delay_15=delay_ball_s;
%%
delay_16=delay_ball_s

%%
delay_11
delay_12
delay_13
delay_14
delay_15
delay_16



%%
N=length(Signalprocesada);


Signalprocesada=downsample(Signalprocesada,15);
Signal2procesada=downsample(Signal2procesada,15);
delaymax=6400*5;

[TDE,peak]=pruebadelay2(Signalprocesada,Signal2procesada,delaymax);
[val,ind]=max(peak);
Best_estimate_TDOA=TDE(ind)
subplot(2,1,1);
plot(TDE);
xlabel('Time (samples)'); ylabel('TDOA (samples)');
subplot(2,1,2);
plot(peak);
xlabel('Time (samples)'); ylabel('peak');
%%
subplot(3,1,1)
specgram(Signalprocesada)

%%


%%INTERNET ALGORITHM

Signalprocesada=downsample(Signalprocesada,3);
Signal2procesada=downsample(Signal2procesada,3);
delaymax=32000*5;
[phi,delay]=doa_aevd2(Signalprocesada,Signal2procesada,7500,delaymax,delaymax*6,10,32000);
[val,ind]=max(delay);
ind
Best_estimate_TDOA=delay(ind)
subplot(2,1,1);
plot(delay);
xlabel('Time (samples)'); ylabel('TDOA (samples)');
subplot(2,1,2);



%%

max_delay=96000*5;
delaymax=96000*5;
T=96000*10;
Signalprocesada=Signalprocesada(T-delaymax:T+delaymax);
Signal2procesada=Signal2procesada(T-delaymax:T+delaymax);
x1=Signalprocesada/max(Signalprocesada);
x2=Signal2procesada/max(Signal2procesada);
iteration=4000;
mu=1000;
x1=x1/max(x1);
x2=x2/max(x2);

x1 = x1(:);
x2 = x2(:);
Nx = length(x1);


 
    %initial state of the filter
    u = zeros(2*Nx,1); 
    M=floor(Nx/2);
    u(M+1)=1;
    u(Nx+M+1)=-1;
  x=[x1;x2];
   for m=1:iteration
      
       e=dot(x,u);  %scalar product
       
    u = u-mu*e*x;
    u=u/(norm(u));
       
    end
    
    [maximum,pos] = max(u(1:Nx));
    [maximum2,pos2] = min(u);
    delay = pos2-pos
    figure
    plot(u)
    
    %%
    %%Localization
    %% 5. Multilateration
% In this final Section, we use the TDOAs estimated from real hydrophones
% signals in Section 4, for estimating the position of the sperm whale on a
% 2D map. We implement a rudimentary multilateration system, on the basis
% of 2 TDOAs only. 
% We first show the position of the hydrophones on the map, from their
% (x,y) coordinates, and then plot the hyperbolas corresponding to each
% pair of TDOA, assuming the speed of sound in water is 1510 m/s. Notice
% we drop the first TDOA estimates, which the LMS algorithm used for
% converging, and only use 10 estimates for our plot. 
%
% *MATLAB function involved:*
% 
% * |plot_hyp(x1,y1,x2,y2,a,color)| plots a hyperbola whose foci 
% are (x1,y1) and (x2,y2), and whose semi-major axis is |a|

hydrophone_pos = [-9617   6566    % sensor 1: x,y [meters]
                  -2132   6635 % sensor 2: x,y
                  5240    6520
                  12844     6865
                  -12402    -6183
                  -4874      -6183
                  9784      -6129];  % sensor 3: x,y
plot(hydrophone_pos(:,1),hydrophone_pos(:,2),'o');

text(hydrophone_pos(1,1),hydrophone_pos(1,2),'  1');
text(hydrophone_pos(2,1),hydrophone_pos(2,2),'  2');
text(hydrophone_pos(3,1),hydrophone_pos(3,2),'  3');
text(hydrophone_pos(4,1),hydrophone_pos(4,2),'  4');
text(hydrophone_pos(5,1),hydrophone_pos(5,2),'  5');
text(hydrophone_pos(6,1),hydrophone_pos(6,2),'  6');
text(hydrophone_pos(7,1),hydrophone_pos(7,2),'  7');

xlabel('x (m) red 2-3  blue 1-2  green 1-3   yellow 4-3   black  1-4   magenta  2-4    yellow 5-1   cyan 5-2    blue 5-3    green 5-4'); ylabel('y (m)');
hold on;


% Keeping 10 TDOA estimates 


sound_speed=1510; % m/s

   plot_hyp(hydrophone_pos(1,1), hydrophone_pos(1,2), ...
            hydrophone_pos(2,1), hydrophone_pos(2,2), ...
            -delay_1*sound_speed/2,'b');
   plot_hyp(hydrophone_pos(2,1), hydrophone_pos(2,2), ...
            hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            -delay_2*sound_speed/2,'r');
        plot_hyp(hydrophone_pos(1,1), hydrophone_pos(1,2), ...
            hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            -delay_3*sound_speed/2,'g');
        plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(4,1), hydrophone_pos(4,2), ...
            -delay_4*sound_speed/2,'y');
        plot_hyp(hydrophone_pos(1,1), hydrophone_pos(1,2), ...
            hydrophone_pos(4,1), hydrophone_pos(4,2), ...
            -delay_5*sound_speed/2,'k');
        plot_hyp(hydrophone_pos(2,1), hydrophone_pos(2,2), ...
            hydrophone_pos(4,1), hydrophone_pos(4,2), ...
            -delay_6*sound_speed/2,'m');
        plot_hyp(hydrophone_pos(1,1), hydrophone_pos(1,2), ...
            hydrophone_pos(5,1), hydrophone_pos(5,2), ...
            -delay_7*sound_speed/2,'y');
        plot_hyp(hydrophone_pos(2,1), hydrophone_pos(2,2), ...
            hydrophone_pos(5,1), hydrophone_pos(5,2), ...
            -delay_8*sound_speed/2,'c');
        plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(5,1), hydrophone_pos(5,2), ...
            -delay_9*sound_speed/2,'b');
        plot_hyp(hydrophone_pos(4,1), hydrophone_pos(4,2), ...
            hydrophone_pos(5,1), hydrophone_pos(5,2), ...
            -delay_10*sound_speed/2,'g');
        
hold off;

%%
hydrophone_pos = [-9617   6566    % sensor 1: x,y [meters]
                  -2132   6635 % sensor 2: x,y
                  5240    6520
                  12844     6865
                  -12402    -6183
                  -4874      -6183
                  9784      -6129
                  5000      15500];  % sensor 3: x,y
plot(hydrophone_pos(:,1),hydrophone_pos(:,2),'.');

text(hydrophone_pos(1,1),hydrophone_pos(1,2),'  1');
text(hydrophone_pos(2,1),hydrophone_pos(2,2),'  2');
text(hydrophone_pos(3,1),hydrophone_pos(3,2),'  3');
text(hydrophone_pos(4,1),hydrophone_pos(4,2),'  4');
text(hydrophone_pos(5,1),hydrophone_pos(5,2),'  5');
text(hydrophone_pos(6,1),hydrophone_pos(6,2),'  6');
text(hydrophone_pos(7,1),hydrophone_pos(7,2),'  7');

xlabel('y (m) blue 3-1   red 3-1    green 3-4   yellow 3-5   black 3-6    magenta  3-7'); ylabel('z (m)');
hold on;


% Keeping 10 TDOA estimates 


sound_speed=1510; % m/s

   plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(1,1), hydrophone_pos(1,2), ...
            -delay_11*sound_speed/2,'b');
   plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(2,1), hydrophone_pos(2,2), ...
            -delay_12*sound_speed/2,'r');
        plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(4,1), hydrophone_pos(4,2), ...
            -delay_13*sound_speed/2,'g');
        plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(5,1), hydrophone_pos(5,2), ...
            -delay_14*sound_speed/2,'y');
        plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(6,1), hydrophone_pos(6,2), ...
            -delay_15*sound_speed/2,'k');
        plot_hyp(hydrophone_pos(3,1), hydrophone_pos(3,2), ...
            hydrophone_pos(7,1), hydrophone_pos(7,2), ...
            -delay_16*sound_speed/2,'m');
 
        
hold off;

%%
% Since the maximum speed of a whale is close to 30 km/h (i.e. 8 m/s), it
% obviously could not move much around hydrophone #2 in the 25 s of data we
% have used for this proof-of-concept. 
% Zooming around hydrophone #2 reveals its trajectory : it moved from
% (10837.5,-14822) to (10844,-14847), i.e. by about 26 m in 25 seconds,
% i.e. at a speed of about 1 m/s. 

clf;
axis([10835, 10847, -14856, -14816]);
grid;
xlabel('x (m)'); ylabel('y (m)');
hold on;
for i=1:length(TDOA_12)-1
    plot_hyp(hydrophone_pos(1,1), hydrophone_pos(1,2), ...
             hydrophone_pos(2,1), hydrophone_pos(2,2), ...
             -TDOA_12(i)*sound_speed/2,'b');
    plot_hyp(hydrophone_pos(2,1), hydrophone_pos(2,2), ...
             hydrophone_pos(3,1), hydrophone_pos(3,2), ...
             -TDOA_23(i)*sound_speed/2,'r');
pause(0.5);
end;
hold off;

distance = sqrt((10844-10837.5)^2+(14847-14822)^2)
    
    


%% DEBUG: no need of aux. variables
if ~DEBUG
    clear('DEBUG','peak*','xcorr*')
end